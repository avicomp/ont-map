@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix spin:  <http://spinrdf.org/spin#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix sp:    <http://spinrdf.org/sp#> .
@prefix spl:   <http://spinrdf.org/spl#> .
@prefix avc:   <http://avc.ru/spin#> .

<http://avc.ru/spin>  a  owl:Ontology ;
        rdfs:comment     "This is an addition to the spin-family in order to customize spin-functions behaviour in GUI.\nAlso it contains several custom functions, which can be expressed through the other spin-library and SPARQL.\nCurrently it is assumed that this library is not going to be included as \"owl:import\" to the mappings produces by the API,\nand all listed custom functions can be considered as templates." ;
        owl:versionIRI   avc:1.0 ;
        owl:versionInfo  "version 1.0" .

spin:_this  a       sp:Variable ;
        sp:varName  "this" .

spin:_arg1  a       sp:Variable ;
        sp:varName  "arg1" .

spin:_arg2  a       sp:Variable ;
        sp:varName  "arg2" .

spin:_source  a     sp:Variable ;
        sp:varName  "source" .

avc:hidden  a       owl:DatatypeProperty ;
        rdfs:comment  "A property for marking unused functions from standard spin-map library supply." ;
        rdfs:range  xsd:string .

avc:runtime  a      owl:DatatypeProperty ;
        rdfs:comment  "A property for using to describe runtime functionality provided by ONT-MAP API" ;
        rdfs:range  xsd:string .

avc:AggregateFunctions
        a                spin:Function ;
        rdfs:comment     "A collection of functions that uses SPARQL aggregate functionality (i.e. COUNT, SUM, MIN, MAX, GROUP_CONCAT)." ;
        rdfs:label       "Aggregate functions" ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

avc:MagicFunctions  a    spin:Function ;
        rdfs:comment     "A special collection of functions provided by AVC that require special treatment while inference\nand therefore may not work as expected in Topbraid Composer." ;
        rdfs:label       "Magic functions" ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

sp:abs  avc:hidden  "Duplicates the function fn:abs, which is preferable, since it has information about return types." .

sp:eq   avc:constraint  [ spl:predicate  sp:arg2 ;
                          spl:valueType  avc:undefined
                        ] ;
        avc:constraint  [ spl:predicate  sp:arg1 ;
                          spl:valueType  avc:undefined
                        ] .

spinmap:targetResource
        avc:hidden    "This function should not be allowed to be used explicitly by API.\nAll cases when spinmap:targetResource might be used, should be described through other functions." ;
        spin:private  true .

spinmapl:relatedSubjectContext
        avc:hidden  "Instead of explicit calling this function, please use ru.avicomp.map.Context#createRelatedContext(...) methods." .

spinmapl:relatedObjectContext
        avc:hidden  "Instead of explicit calling this function, please use ru.avicomp.map.Context#createRelatedContext(...) methods." .

avc:UUID  a                 spinmap:TargetFunction ;
        rdfs:comment        "A target function.\nGenerates an IRI from the UUID URN scheme based on source individual MD5 sum.\nEach call of AVC:UUID returns the same UUID IRI.\nExample: <urn:uuid:f3bf688d44e249fade9ca8ca23e29884>." ;
        rdfs:label          "MD5 UUID" ;
        rdfs:seeAlso        <https://www.w3.org/TR/sparql11-query/#func-uuid> , sp:UUID ;
        rdfs:subClassOf     spinmap:TargetFunctions ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ a        sp:iri ;
                                                      sp:arg1  [ sp:varName  "uri" ]
                                                    ]
                                                  ) ;
                              sp:where            ( [ a              sp:Bind ;
                                                      sp:expression  [ a        sp:md5 ;
                                                                       sp:arg1  [ a        sp:str ;
                                                                                  sp:arg1  spin:_source
                                                                                ]
                                                                     ] ;
                                                      sp:variable    [ sp:varName  "value" ]
                                                    ]
                                                    [ a              sp:Bind ;
                                                      sp:expression  [ a        sp:concat ;
                                                                       sp:arg1  "urn:uuid:" ;
                                                                       sp:arg2  [ sp:varName  "value" ]
                                                                     ] ;
                                                      sp:variable    [ sp:varName  "uri" ]
                                                    ]
                                                  )
                            ] ;
        spin:returnType     rdfs:Resource ;
        spinmap:shortLabel  "UUID" .

avc:groupConcat  a          spin:Function ;
        rdfs:comment        "An aggregate function to concatenate values from assertions with the same individual and property using specified separator.\nNotice: string natural sort order is used." ;
        rdfs:label          "Group concat" ;
        rdfs:subClassOf     avc:AggregateFunctions ;
        avc:runtime         "ru.avicomp.map.spin.AdjustGroupConcatImpl" ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ a              sp:GroupConcat ;
                                                      sp:distinct    true ;
                                                      sp:expression  [ sp:varName  "r" ] ;
                                                      sp:separator   " + "
                                                    ]
                                                  ) ;
                              sp:where            ( [ a         sp:SubQuery ;
                                                      sp:query  [ a           sp:Select ;
                                                                  sp:orderBy  ( [ sp:varName  "r" ]
                                                                              ) ;
                                                                  sp:where    ( [ sp:object     [ sp:varName  "r" ] ;
                                                                                  sp:predicate  spin:_arg1 ;
                                                                                  sp:subject    spin:_arg2
                                                                                ]
                                                                              )
                                                                ]
                                                    ]
                                                  )
                            ] ;
        spin:constraint     [ a                 spl:Argument ;
                              rdfs:comment      "The separator to put between the two values." ;
                              spl:defaultValue  " + " ;
                              spl:optional      true ;
                              spl:predicate     spinmapl:separator ;
                              spl:valueType     xsd:string
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The predicate (property)" ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The subject (instance)" ;
                              spl:optional   true ;
                              spl:predicate  sp:arg2 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        spin:returnType     xsd:string ;
        spinmap:shortLabel  "groupConcat" .

avc:withDefault  a          spin:Function ;
        rdfs:comment        "An ontology function for passing default values into a property mapping.\nIt is used for mapping data/annotation property assertion that absences in a particular source individual.\nLike spinmap:equals it returns the primary input property (?arg1) unchanged." ;
        rdfs:label          "With Default" ;
        rdfs:seeAlso        spinmap:equals , avc:asIRI ;
        rdfs:subClassOf     spl:OntologyFunctions ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( spin:_arg1 ) ;
                              sp:where            ()
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The default value to form a fake assertion on the source individual" ;
                              spl:predicate  sp:arg2 ;
                              spl:valueType  rdfs:Literal
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The property to get assertion value" ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:returnType     rdf:Property ;
        spinmap:shortLabel  "withDefault" .

avc:asIRI  a                spin:Function ;
        rdfs:comment        "An ontology function for passing property IRI as it is.\nAny other map-function will actually accept a property assertion value found by mapping template call\n,while this function forces not to get a value but use a predicate IRI instead." ;
        rdfs:label          "As IRI" ;
        rdfs:seeAlso        avc:withDefault , spinmap:equals ;
        rdfs:subClassOf     spl:OntologyFunctions ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( spin:_arg1 ) ;
                              sp:where            ()
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The property to return as it is" ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:returnType     rdf:Property ;
        spinmap:shortLabel  "asIRI" .

avc:currentIndividual
        a                   spin:Function ;
        rdfs:comment        "A magic function to get current individual while inference.\nEquivalent to ?this\nPlease note: this function may not work as expected when using Composer." ;
        rdfs:label          "Get current individual" ;
        rdfs:subClassOf     avc:MagicFunctions ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "r" ]
                                                  ) ;
                              sp:where            ( [ a              sp:Bind ;
                                                      sp:expression  spin:_this ;
                                                      sp:variable    [ sp:varName  "r" ]
                                                    ]
                                                  )
                            ] ;
        spin:returnType     rdfs:Resource ;
        spinmap:shortLabel  "currentIndividual" .